generators:
  train:
    _target_: icicl.data.gp.RandomScaleGPGenerator
    dim: ${params.dim}
    kernel_type: eq
    min_log10_lengthscale: -0.602
    max_log10_lengthscale: 0.602
    noise_std: 0.2
    min_num_ctx: 1
    max_num_ctx: 64
    min_num_trg: 128
    max_num_trg: 128
    context_range: [[-2.0, 2.0]]
    target_range: [[-3.0, 3.0]]
    samples_per_epoch: 16384
    batch_size: 16
  val:
    _target_: icicl.data.gp.RandomScaleGPGenerator
    dim: ${params.dim}
    kernel_type: eq
    min_log10_lengthscale: -0.602
    max_log10_lengthscale: 0.602
    noise_std: 0.2
    min_num_ctx: 1
    max_num_ctx: 64
    min_num_trg: 128
    max_num_trg: 128
    context_range: [[-2.0, 2.0]]
    target_range: [[-3.0, 3.0]]
    samples_per_epoch: 4096
    batch_size: 16

model:
  _target_: icicl.models.convcnp.ConvCNP
  encoder: ${convcnp_encoder}
  decoder: ${convcnp_decoder}
  likelihood: ${likelihood}

convcnp_encoder:
  _target_: icicl.models.convcnp.ConvCNPEncoder
  conv_net: ${cnn}
  setconv_encoder: ${setconv_encoder}
  resizer: ${encoder_resizer}

setconv_encoder:
  _target_: icicl.networks.setconv.SetConvEncoder
  dim: ${params.dim}
  points_per_unit: ${params.points_per_unit}
  init_lengthscale: ${eval:'2 * 1 / ${params.points_per_unit}'}
  margin: 0.1
  train_lengthscale: True

cnn:
  _target_: icicl.networks.cnn.UNet
  dim: ${params.dim}
  num_channels: ${params.num_channels}
  num_blocks: ${params.num_blocks}
  kernel_size: ${params.kernel_size}

# cnn:
#   _target_: icicl.networks.cnn.CNN
#   dim: ${params.dim}
#   num_channels: 64
#   num_blocks: 5
#   kernel_size: 19
#   # num_conv_layers: 2

encoder_resizer:
  _target_: icicl.networks.mlp.MLP
  in_dim: 2
  out_dim: ${params.num_channels}
  num_layers: 2
  width: ${params.num_channels}

convcnp_decoder:
  _target_: icicl.models.convcnp.ConvCNPDecoder
  setconv_decoder: ${setconv_decoder}
  resizer: ${decoder_resizer}

setconv_decoder:
  _target_: icicl.networks.setconv.SetConvDecoder
  dim: ${params.dim}
  init_lengthscale: .1
  scaling_factor: ${eval:'${params.points_per_unit} ** ${params.dim}'}

decoder_resizer:
  _target_: icicl.networks.mlp.MLP
  in_dim: ${params.num_channels}
  out_dim: 2
  num_layers: 2
  width: ${params.num_channels}

likelihood:
  _target_: icicl.likelihoods.gaussian.HeteroscedasticNormalLikelihood

optimiser:
  _target_: torch.optim.Adam
  _partial_: True
  lr: 5e-4

params:
  epochs: 200
  dim: 1
  points_per_unit: 64
  num_channels: 16
  num_blocks: 5
  kernel_size: 5

misc:
  project: convcnp
  name: synthetic-1d-L${params.num_blocks}-C${params.num_channels}-K${params.kernel_size}-P${params.points_per_unit}
  resume_from_checkpoint: null
