# So use MHCA Encoder to same grid, coarsen grid using patch embedding and no swin attention

generators:
  train:
    _target_: icicl.data.era5.ERA5OOTGDataGenerator
    data_dir: ~/rds/hpc-work/data/era5/
    fnames:
      - 2019_2m_temperature.nc
    data_vars: ["t2m"]
    min_pc: 0.0001
    max_pc: 0.001 # max percentage context points out of total (product of batch_grid_size)
    y_mean: [279.0644808446564] # calculated previously
    y_std: [21.169963472302797]
    batch_grid_size: ${params.batch_grid_size}
    coarsen_factors: ${params.coarsen_factors}
    max_nt: ${params.num_targets}
    use_time: False
    return_grid: True
    lazy_loading: False
    samples_per_epoch: 16_000
    batch_size: 16
    deterministic: ${params.deterministic}
  val:
    _target_: icicl.data.era5.ERA5OOTGDataGenerator
    data_dir: ~/rds/hpc-work/data/era5/
    fnames:
      - jan_2019_2m_temperature.nc
    data_vars: ["t2m"]
    min_pc: 0.0001
    max_pc: 0.001 # max percentage context points out of total (product of batch_grid_size)
    batch_grid_size: ${params.batch_grid_size}
    coarsen_factors: ${params.coarsen_factors}
    max_nt: ${params.num_targets}
    use_time: False
    return_grid: True
    lazy_loading: False
    samples_per_epoch: 160
    batch_size: 16
    deterministic: ${params.deterministic}
    
model:
  _target_: icicl.models.ootg_tnp.OOTG_TNPD
  encoder: ${tnpd_encoder}
  decoder: ${tnpd_decoder}
  likelihood: ${likelihood}

tnpd_encoder:
  _target_: icicl.models.ootg_tnp.OOTG_TNPDEncoder
  grid_encoder: ${grid_encoder}
  transformer_encoder: ${transformer_encoder}
  xy_encoder: ${xy_encoder}
  patch_encoder: ${patch_encoder}

grid_encoder: 
  _target_: icicl.networks.grid_encoders.PseudoTokenGridEncoder
  grid_shape: [30, 60] # (720 / 6 / 4, 1440 / 6 / 4)
  embed_dim: ${params.embed_dim}
  mhca_layer: ${grid_mhca_layer}

grid_mhca_layer:
  _target_: icicl.networks.attention_layers.MultiHeadCrossAttentionLayer
  embed_dim: ${params.embed_dim}
  num_heads: ${params.num_heads}
  head_dim: ${params.head_dim}
  feedforward_dim: ${params.embed_dim}
  norm_first: ${params.norm_first}

transformer_encoder:
  _target_: icicl.networks.grid_transformer.GridTransformerEncoder
  mhca_layer: ${mhca_layer}
  num_layers: ${params.num_layers}

patch_encoder:
  _target_: icicl.networks.patch_encoders.PatchEncoder
  embed_dim: ${params.embed_dim}
  patch_size: ${params.patch_size}

mhca_layer:
  _target_: icicl.networks.attention_layers.MultiHeadCrossAttentionLayer
  embed_dim: ${params.embed_dim}
  num_heads: ${params.num_heads}
  head_dim: ${params.head_dim}
  feedforward_dim: ${params.embed_dim}
  norm_first: ${params.norm_first}

xy_encoder:
  _target_: icicl.networks.mlp.MLP
  in_dim: ${eval:'2 + ${params.y_dim} + ${params.x_dim}'} # two from preprocessing
  out_dim: ${params.embed_dim}
  num_layers: 2
  width: ${params.embed_dim}

tnpd_decoder:
  _target_: icicl.models.tnp.TNPDDecoder
  z_decoder: ${z_decoder}

z_decoder:
  _target_: icicl.networks.mlp.MLP
  in_dim: ${params.embed_dim}
  out_dim: 2 # 1 for std and 1 for means
  num_layers: 2
  width: ${params.embed_dim}

likelihood:
  _target_: icicl.likelihoods.gaussian.HeteroscedasticNormalLikelihood

optimiser:
  _target_: torch.optim.AdamW
  _partial_: True
  lr: 5.0e-4

params:
  epochs: 200
  deterministic: True

  x_dim: 2
  y_dim: 1
  batch_grid_size: [1, 720, 1440] # time, lat, lon. Exact 0.25Â° grid this way.
  coarsen_factors: [6, 6] # so 120x240 grid, similar to Aardvark. 
  num_targets: 200

  embed_dim: 128
  num_heads: 8
  head_dim: 16
  norm_first: True
  num_layers: 5

  patch_size: [4, 4]


misc:
  project: era5-no-time
  name: mhca_encoder-PC-TNP_BGS=${params.batch_grid_size}_CF=${params.coarsen_factors}_PS=${params.patch_size}-GEGS=${grid_encoder.grid_shape}
  num_workers: 0
  gradient_clip_val: 0.5
  plot_interval: 10
  logging: False # TODO remove
  resume_from_checkpoint: null
